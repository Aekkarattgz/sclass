#include <WiFi.h>
#include <PubSubClient.h>

#include <Wire.h>

#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

const char* ssid     = "WIFI";
const char* password = "PASSWORDWIFI";
const char* mqtt_server = "IPSERVER";
const int mqtt_port = 1883;
const char* mqtt_Client = "USERCLIENT";
const char* mqtt_username = "USERSERVER";
const char* mqtt_password = "PASSWORDSERVER";

int analog_value = 0;
char msg[100];
long lastMsg = 0;
WiFiClient espClient;
PubSubClient client(espClient);

//const uint16_t kIrLed2 = 18;

IRsend irsend1(kIrLed1);  // Set the GPIO to be used to sending the message.
//IRsend irsend2(kIrLed2);

float readlight() {
  analog_value = analogRead(36);
  if (analog_value > 1000) {
    analog_value = 1000;
  }
  int light = (1000 - analog_value) * 100 / 1000;
  return light;
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting SCLASS connectionâ€¦");
    client.publish("/data_update_Borad", "{Board is connecting}");
    if (client.connect(mqtt_Client, mqtt_username, mqtt_password)) {
      Serial.println("SCLASS CLASS 44-702 connected");
      client.subscribe("/Air");
      digitalWrite(LED_BUILTIN, 1);
      client.publish("/data_update_Borad", "{Bpard connect to Server}");
    }
    else {
      digitalWrite(LED_BUILTIN, 0);
      client.publish("/data_update_Borad", "{Board connection error}");
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println("try again in 5 seconds");
      delay(5000);
    }
  }
}


// Example of data captured by IRrecvDumpV2.ino
//////////////////////////////////////////////////////////////////////////
uint16_t rawData_ON18[131] = {9244, 4462,  642, 462,  590, 1568,  588, 1566,  640, 464,  588, 1566,  642, 464,  640, 464,  640, 464,  640, 462,  590, 1566,  640, 464,  640, 464,  640, 464,  640, 464,  588, 1568,  590, 1566,  642, 462,  640, 464,  640, 464,  640, 464,  640, 464,  640, 462,  642, 462,  640, 464,  640, 464,  640, 462,  642, 464,  640, 464,  640, 464,  642, 462,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  638, 464,  640, 464,  588, 1566,  642, 464,  588, 1568,  642, 464,  640, 464,  640, 464,  640, 464,  588, 1568,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  586, 1568,  588, 1568,  588, 1568,  642, 462,  642, 462,  642, 464,  640, 464,  588, 1568,  640, 464,  640, 464,  640, 464,  508};  // UNKNOWN 4866B7C7
uint16_t rawData_ON19[131] = {9238, 4466,  638, 466,  584, 1572,  586, 1570,  640, 466,  584, 1570,  640, 464,  638, 466,  642, 462,  640, 464,  588, 1568,  642, 462,  660, 442,  642, 464,  588, 1568,  660, 444,  658, 444,  660, 444,  660, 442,  662, 442,  662, 442,  660, 442,  662, 442,  662, 442,  662, 442,  662, 442,  662, 442,  662, 444,  660, 444,  662, 442,  662, 442,  662, 440,  664, 440,  664, 442,  662, 444,  660, 444,  660, 442,  660, 444,  660, 444,  660, 444,  640, 464,  588, 1568,  642, 464,  640, 464,  586, 1568,  640, 466,  638, 466,  640, 464,  586, 1570,  640, 464,  638, 468,  636, 468,  638, 464,  636, 468,  584, 1572,  584, 1572,  582, 1574,  634, 470,  632, 472,  634, 472,  634, 470,  580, 1576,  632, 472,  630, 474,  634, 470,  500};  // CARRIER_AC64 10E0890000002216
uint16_t rawData_ON20[131] =  {9268, 4436,  666, 438,  610, 1546,  610, 1546,  664, 440,  610, 1548,  662, 442,  664, 438,  662, 442,  662, 442,  610, 1546,  662, 442,  664, 444,  658, 446,  604, 1550,  658, 448,  608, 1546,  664, 440,  660, 446,  654, 448,  608, 528,  628, 442,  658, 448,  606, 496,  608, 496,  658, 448,  654, 448,  608, 498,  658, 444,  664, 442,  606, 496,  662, 444,  660, 444,  608, 500,  658, 442,  662, 442,  608, 496,  658, 446,  660, 446,  662, 440,  664, 438,  608, 1550,  662, 442,  660, 446,  658, 446,  660, 442,  606, 498,  664, 440,  602, 1554,  660, 444,  660, 444,  656, 446,  658, 448,  664, 440,  612, 1544,  610, 1546,  612, 1544,  660, 444,  658, 448,  662, 442,  660, 444,  610, 1546,  664, 440,  662, 440,  664, 442,  536};  // UNKNOWN 9D0C3D52
uint16_t rawData_ON21[131] =  {9244, 4462,  640, 464,  588, 1568,  588, 1570,  640, 462,  590, 1568,  642, 464,  640, 462,  642, 464,  640, 464,  588, 1570,  640, 464,  642, 462,  642, 464,  588, 1568,  588, 1568,  642, 464,  640, 464,  640, 464,  638, 464,  642, 464,  640, 464,  642, 464,  640, 464,  640, 464,  642, 464,  640, 464,  642, 462,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 462,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  586, 1568,  588, 1568,  586, 1570,  642, 464,  638, 464,  640, 464,  588, 1568,  642, 462,  640, 464,  640, 464,  640, 464,  640, 466,  586, 1570,  588, 1568,  586, 1570,  640, 464,  640, 464,  640, 464,  640, 464,  588, 1570,  638, 464,  642, 464,  640, 464,  508};  // UNKNOWN 303F7905
uint16_t rawData_ON22[131] = {9264, 4442,  658, 446,  606, 1548,  610, 1548,  644, 462,  608, 1548,  660, 442,  662, 444,  660, 444,  660, 444,  608, 1548,  662, 444,  660, 442,  660, 444,  590, 1566,  590, 1566,  610, 1546,  644, 462,  662, 444,  660, 442,  662, 442,  660, 444,  660, 444,  660, 446,  660, 442,  642, 462,  642, 462,  640, 464,  642, 464,  640, 462,  642, 462,  642, 462,  642, 462,  642, 462,  642, 462,  642, 464,  640, 462,  642, 462,  642, 464,  640, 462,  640, 464,  640, 464,  588, 1566,  590, 1566,  642, 464,  640, 464,  640, 464,  640, 464,  588, 1568,  642, 464,  640, 464,  640, 464,  640, 464,  638, 466,  588, 1570,  586, 1570,  588, 1568,  640, 464,  642, 464,  638, 464,  640, 464,  588, 1568,  640, 466,  638, 464,  640, 464,  508};  // UNKNOWN 1B7B4685
uint16_t rawData_ON23[131] = {9244, 4462,  642, 464,  586, 1568,  590, 1566,  642, 462,  588, 1568,  642, 464,  640, 464,  642, 464,  640, 462,  588, 1568,  640, 464,  642, 462,  588, 1566,  642, 462,  642, 464,  640, 464,  640, 464,  640, 464,  640, 462,  640, 464,  642, 462,  640, 462,  642, 464,  640, 464,  640, 464,  642, 462,  640, 464,  640, 462,  642, 464,  640, 462,  642, 462,  642, 462,  640, 462,  642, 462,  642, 464,  640, 464,  640, 464,  642, 462,  640, 464,  640, 464,  640, 464,  588, 1568,  642, 462,  588, 1568,  640, 464,  642, 462,  640, 464,  588, 1568,  642, 462,  640, 464,  642, 464,  640, 462,  640, 462,  590, 1568,  586, 1570,  588, 1568,  642, 462,  642, 462,  640, 464,  640, 464,  588, 1568,  640, 464,  640, 464,  640, 464,  508};  // UNKNOWN D075A9D3
uint16_t rawData_ON24[131] = {9240, 4464,  638, 466,  584, 1572,  584, 1570,  638, 468,  586, 1570,  636, 468,  636, 466,  640, 466,  638, 466,  586, 1570,  638, 464,  636, 468,  586, 1570,  638, 466,  640, 466,  584, 1570,  640, 464,  638, 466,  638, 466,  636, 468,  636, 468,  636, 468,  638, 466,  636, 468,  636, 466,  636, 468,  636, 468,  636, 468,  636, 468,  638, 466,  636, 468,  636, 468,  634, 470,  636, 468,  634, 468,  634, 470,  634, 470,  632, 474,  626, 478,  632, 470,  632, 472,  578, 1578,  628, 476,  632, 472,  630, 474,  578, 526,  630, 474,  576, 1580,  630, 474,  578, 526,  578, 526,  578, 524,  580, 526,  526, 1630,  526, 1630,  526, 1630,  578, 526,  578, 526,  578, 526,  578, 526,  526, 1630,  580, 524,  628, 476,  578, 526,  446};  // UNKNOWN 632A90D3
uint16_t rawData_ON25[131] = {9268, 4466,  638, 466,  586, 1570,  586, 1570,  638, 466,  610, 1546,  638, 466,  638, 466,  638, 466,  636, 468,  584, 1572,  638, 468,  636, 470,  584, 1570,  640, 466,  608, 1548,  636, 466,  638, 466,  636, 466,  638, 468,  636, 466,  660, 444,  636, 468,  638, 466,  638, 468,  636, 466,  638, 466,  638, 466,  638, 466,  636, 468,  638, 466,  638, 466,  638, 466,  638, 468,  636, 466,  638, 466,  636, 466,  638, 466,  638, 466,  662, 442,  636, 468,  638, 466,  636, 468,  584, 1570,  586, 1570,  640, 466,  638, 466,  638, 466,  586, 1572,  638, 466,  638, 468,  636, 466,  636, 468,  636, 468,  586, 1570,  586, 1570,  610, 1546,  638, 466,  636, 468,  638, 466,  638, 466,  586, 1570,  638, 468,  636, 468,  636, 468,  506};  // UNKNOWN 40588247
uint16_t rawData_ON26[131] = {9244, 4462,  640, 464,  586, 1568,  588, 1568,  640, 464,  588, 1568,  642, 462,  640, 464,  640, 464,  640, 464,  588, 1570,  640, 464,  640, 464,  588, 1568,  640, 464,  586, 1570,  588, 1570,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 462,  640, 464,  638, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 466,  638, 464,  640, 466,  638, 464,  640, 464,  640, 466,  638, 468,  636, 464,  640, 464,  640, 464,  638, 466,  638, 464,  640, 464,  640, 464,  586, 1570,  640, 464,  640, 464,  640, 464,  640, 466,  586, 1570,  640, 464,  640, 464,  638, 464,  640, 464,  638, 466,  586, 1568,  588, 1568,  588, 1570,  640, 464,  640, 464,  642, 464,  640, 464,  586, 1570,  640, 464,  642, 462,  640, 466,  508};  // UNKNOWN 2B944FC7
uint16_t rawData_ON27[131] = {9242, 4464,  638, 466,  584, 1572,  584, 1574,  634, 470,  582, 1574,  636, 470,  634, 468,  638, 466,  636, 466,  584, 1574,  630, 474,  634, 470,  582, 1574,  578, 1578,  630, 474,  636, 468,  636, 468,  634, 472,  634, 470,  634, 470,  628, 476,  632, 472,  630, 474,  578, 526,  632, 472,  580, 526,  632, 472,  578, 526,  578, 526,  626, 478,  578, 526,  578, 526,  628, 476,  578, 526,  628, 476,  578, 526,  578, 526,  628, 476,  578, 526,  578, 526,  630, 474,  632, 472,  628, 476,  578, 1578,  632, 472,  634, 470,  628, 476,  578, 1578,  632, 472,  632, 472,  578, 526,  634, 470,  632, 474,  580, 1576,  582, 1574,  582, 1574,  630, 476,  632, 470,  628, 476,  630, 474,  580, 1576,  634, 470,  634, 470,  634, 470,  502};  // UNKNOWN 978A7921
uint16_t rawData_ON28[131] = {9234, 4472,  634, 470,  578, 1578,  582, 1576,  628, 476,  580, 1578,  632, 470,  632, 472,  632, 472,  632, 472,  580, 1576,  634, 470,  632, 472,  576, 1580,  580, 1576,  634, 472,  580, 1574,  632, 474,  632, 470,  632, 472,  634, 470,  628, 476,  634, 470,  632, 472,  630, 476,  630, 472,  630, 474,  626, 476,  632, 472,  634, 472,  630, 472,  626, 478,  632, 470,  632, 472,  630, 474,  632, 472,  634, 472,  630, 474,  628, 476,  630, 474,  628, 476,  632, 472,  632, 472,  632, 474,  578, 526,  578, 526,  632, 472,  578, 526,  574, 1580,  580, 524,  578, 526,  628, 474,  578, 526,  630, 474,  574, 1582,  526, 1630,  526, 1630,  626, 478,  578, 526,  578, 526,  578, 526,  526, 1630,  628, 476,  578, 526,  578, 526,  446};  // UNKNOWN E9888F61
uint16_t rawData_ON29[131] = {9244, 4460,  642, 462,  588, 1568,  588, 1568,  640, 464,  588, 1568,  642, 462,  640, 462,  642, 464,  638, 464,  588, 1568,  640, 464,  640, 462,  588, 1568,  588, 1568,  588, 1568,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  638, 466,  640, 462,  642, 462,  642, 462,  642, 462,  642, 462,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 466,  638, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  588, 1568,  588, 1568,  588, 1570,  588, 1568,  642, 462,  640, 464,  640, 464,  590, 1566,  640, 464,  640, 464,  642, 462,  640, 464,  640, 464,  588, 1568,  588, 1570,  588, 1568,  640, 464,  640, 464,  640, 466,  638, 466,  588, 1568,  640, 464,  640, 464,  640, 464,  510};  // UNKNOWN C854C16D
uint16_t rawData_ON30[131] = {9232, 4474,  632, 474,  526, 1630,  578, 1578,  626, 480,  576, 1580,  632, 472,  630, 474,  578, 526,  578, 526,  578, 1578,  632, 472,  632, 472,  576, 1580,  578, 1578,  578, 1578,  580, 1576,  578, 526,  632, 472,  578, 526,  632, 472,  624, 480,  578, 526,  578, 526,  626, 478,  632, 472,  578, 526,  630, 472,  626, 478,  578, 526,  578, 526,  580, 524,  632, 472,  626, 478,  578, 526,  628, 476,  578, 524,  630, 474,  578, 526,  578, 526,  580, 524,  526, 1628,  576, 1582,  526, 1630,  626, 476,  578, 526,  578, 526,  578, 526,  526, 1628,  626, 478,  580, 526,  578, 528,  578, 526,  578, 526,  526, 1630,  526, 1630,  526, 1630,  578, 526,  578, 526,  624, 478,  580, 526,  526, 1630,  580, 524,  580, 526,  578, 526,  446};  // UNKNOWN B3908EED
uint16_t rawData_OFF[131] = {9244, 4462,  640, 462,  588, 1568,  588, 1568,  640, 464,  640, 464,  630, 474,  642, 464,  640, 464,  640, 464,  588, 1568,  640, 464,  640, 464,  642, 462,  640, 466,  638, 464,  588, 1568,  640, 464,  642, 464,  640, 462,  640, 464,  640, 464,  640, 464,  640, 464,  640, 464,  640, 462,  642, 464,  640, 462,  642, 464,  640, 464,  640, 464,  640, 462,  640, 466,  640, 464,  640, 464,  640, 464,  640, 464,  640, 466,  640, 462,  640, 462,  642, 464,  640, 464,  586, 1570,  640, 464,  642, 462,  640, 464,  640, 464,  640, 464,  588, 1568,  640, 464,  642, 464,  640, 462,  640, 464,  640, 464,  588, 1568,  588, 1570,  588, 1568,  640, 464,  640, 464,  640, 464,  640, 464,  586, 1570,  640, 464,  640, 464,  642, 464,  508};  // UNKNOWN 8843AF63
//////////////////////////////////////////////////////////////////////////
/*------------------------------------------------------------------------*/
void callback(char* topic, byte* payload, unsigned int length) {
  payload[length] = '\0';
  String topic_str = topic, payload_str = (char*)payload;
  Serial.println("[" + topic_str + "]: " + payload_str);
  String message;

  for (int i = 0; i < length; i++) {
    message = message + (char)payload[i];
  }
  Serial.println(message);
  /////////////////////////////////////////////////////////////////////////////////////////////
  if (String(topic) == "/Air") {
    if (message == "18") {
      irsend1.sendRaw(rawData_ON18, 131, 38);
      //irsend2.sendRaw(rawData_ON18, 131, 38);
    }
    else if (message == "19") {
      irsend1.sendRaw(rawData_ON19, 131, 38);
     // irsend2.sendRaw(rawData_ON19, 131, 38);
    }
    else if (message == "20") {
      irsend1.sendRaw(rawData_ON20, 131, 38);
      // irsend2.sendRaw(rawData_ON20, 131, 38);
    }
    else if (message == "21") {
      irsend1.sendRaw(rawData_ON21, 131, 38);
      // irsend2.sendRaw(rawData_ON21, 131, 38);
    }
    else if (message == "22") {
      irsend1.sendRaw(rawData_ON22, 131, 38);
      // irsend2.sendRaw(rawData_ON22, 131, 38);
    }
    else if (message == "23") {
      irsend1.sendRaw(rawData_ON23, 131, 38);
     // irsend2.sendRaw(rawData_ON23, 131, 38);
    } 
    else if (message == "24") {
      irsend1.sendRaw(rawData_ON24, 131, 38);
     // irsend2.sendRaw(rawData_ON24, 131, 38);
    }
    else if (message == "25") {
      irsend1.sendRaw(rawData_ON25, 131, 38);
     // irsend2.sendRaw(rawData_ON25, 131, 38);
    }
    else if (message == "26") {
      irsend1.sendRaw(rawData_ON26, 131, 38);
     // irsend2.sendRaw(rawData_ON26, 131, 38);
    }
    else if (message == "27") {
      irsend1.sendRaw(rawData_ON27, 131, 38);
     // irsend2.sendRaw(rawData_ON27, 131, 38);
    }
    else if (message == "28") {
      irsend1.sendRaw(rawData_ON28, 131, 38);
    //  irsend2.sendRaw(rawData_ON28, 131, 38);
    }
    else if (message == "29") {
      irsend1.sendRaw(rawData_ON29, 131, 38);
    //  irsend2.sendRaw(rawData_ON29, 131, 38);
    }
    else if (message == "30") {
      irsend1.sendRaw(rawData_ON30, 131, 38);
    //  irsend2.sendRaw(rawData_ON30, 131, 38);
    }
    else if (message == "on") {
      irsend1.sendRaw(rawData_ON25, 131, 38);
     // irsend2.sendRaw(rawData_ON25, 131, 38);
    }
    else if (message == "off") {
      irsend1.sendRaw(rawData_OFF, 131, 38);
     // irsend2.sendRaw(rawData_OFF, 131, 38);
    }
  }

}
void setup() {
  irsend1.begin();
  //irsend2.begin();
#if ESP8266
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
#else  // ESP8266
  Serial.begin(115200, SERIAL_8N1);
#endif  // ESP8266
  Serial.println("Starting...");
  if (WiFi.begin(ssid, password)) {
    while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
      Serial.print(".");
    }
  }
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  pinMode(LED_BUILTIN, OUTPUT);

};
/*------------------------------------------------------------------------*/
void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  String place = "44-704";

  long now = millis();
  if (now - lastMsg > 10000) {
    lastMsg = now;
    String data = "{\"data\": {\"place\": \"" +  String(place) + "\"}}";
    //   Serial.println(data);
    // Serial.println(Ling_Row1);
    data.toCharArray(msg, (data.length() + 1));
    client.publish("@shadow/data/update", msg);
  }
  delay(1);
};
/*------------------------------------------------------------------------*/
